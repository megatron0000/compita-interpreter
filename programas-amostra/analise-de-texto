/*  Programa para contar as ocorrencias das palavras de um texto */

program AnaliseDeTexto {

/*  Variaveis globais  */

global: 
	char nomes[50,10], palavra[10];
	int ntab, nocorr[50];

functions:

/*  Funcao para procurar uma palavra na tabela de palavras  */

int Procura () {

local:
	int i, inf, sup, med, posic, compara;
    	logic achou, fimteste;
statements:
	achou <- false; inf <- 1; sup <- ntab;
	while (!achou && sup >= inf) {
		med <- (inf + sup) / 2;
		compara <- 0; fimteste <- false;
		for (i <- 0; !fimteste && compara = 0; i <- i+1) {
            	if (palavra[i] < nomes[med,i])
               	compara <- -1;
            	else if (palavra[i] > nomes[med,i])
               	compara <- 1;
            	if (palavra[i] = '\0' || nomes[med,i] = '\0')
               	fimteste <- true;
		}
		if (compara = 0)
			achou <- true;
		else if (compara < 0)
			sup <- med - 1;
		else inf <- med + 1;
	}
	if (achou) posic <- med;
	else posic <- -inf;
	return posic;

} /* Fim da funcao Procura */

/*  Funcao para inserir uma palavra na tabela de palavras  */

void Inserir (int posic) {

local:
	int i, j; logic fim;
statements:
	ntab <- ntab + 1;
	for (i <- ntab; i >= posic+1; i <- i-1) {
        fim <- false;
        for (j <- 0; !fim; j <- j+1) {
            nomes[i,j] <- nomes[i-1,j];
            if (nomes[i,j] = '\0') fim <- true;
        }
	   nocorr[i] <- nocorr[i-1];
	}
    	fim <- false;
    	for (j <- 0; !fim; j <- j+1) {
        	nomes[posic,j] <- palavra[j];
        	if (palavra[j] = '\0') fim <- true;
    	}
	nocorr[posic] <- 1;

} /* Fim da funcao Inserir */

/*  Funcao para escrever a tabela de palavras  */

void ExibirTabela () {

local:
	int i, j; logic fim; int size;
statements:
	write ("       ", "Palavra      ",
								"   Num. de ocorr.\n");
	for (i <- 1; i <= 50; i <- i+1) write ("-");
	for (i <- 1; i <= ntab; i <- i+1) {
    size <- 0;
		write ("\n       "); fim <- false;
		for (j <- 0; !fim; j <- j+1) {
            if (nomes[i,j] = '\0') fim <- true;
            else {
              write (nomes[i,j]);
              size <- size + 1;
            }
   		}
    for (j<- 0; j < 15 - size; j <- j + 1) write(" ");
		write ("|      ", nocorr[i]);
	}
  write("\n");

} /* Fim da funcao ExibirTabela */


/*  Modulo principal  */

main {

local:
	int i, posic;
    	char c, lixo; logic fim;
statements:
	ntab <- 0;
	write ("Nova palavra? (s/n): ");
	read (c);
	while (c = 's' || c = 'S') {
        	write ("\nDigite a palavra: ");
          read(lixo); /* skip \n */
        	fim <- false;
		for (i <- 0; !fim; i <- i+1) {
            	read (palavra[i]);
            	if (palavra[i] = '\n') {
                	fim <- true;
                	palavra[i] <- '\0';
            	}
        	}
		posic <- Procura ();
    write(posic, "\n");
		if (posic > 0)
			nocorr[posic] <- nocorr[posic] + 1;
		else
			call Inserir (-posic);
        	write ("\n\nNova palavra? (s/n): ");
        	read (c);
	}
	call ExibirTabela ();

} /* Fim da funcao main */

} /* Fim do programa AnaliseDeTexto */